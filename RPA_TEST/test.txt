# pre_pre_process.py 상단 어딘가 (PIL import 근처)
from PIL import Image, ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True   # 손상/잘린 이미지도 강제 로드
Image.MAX_IMAGE_PIXELS = 100_000_000     # 초대형 이미지 허용(필요시 조정)

import time, os
def convert_to_png(input_path: str, save_dir: str) -> str:
    logger.info("[시작] convert_to_png")
    t0 = time.time()
    try:
        assert os.path.isfile(input_path), f"파일이 존재하지 않음: {input_path}"
        os.makedirs(save_dir, exist_ok=True)

        filename = os.path.splitext(os.path.basename(input_path))[0] + ".png"
        save_path = os.path.join(save_dir, filename)

        # 디버깅용: 원본 파일 크기/확장자 로그
        try:
            size = os.path.getsize(input_path)
            logger.debug(f"[convert_to_png] src={input_path}, size={size} bytes")
        except Exception:
            logger.debug(f"[convert_to_png] src={input_path}, size=unknown")

        # 실제 로딩을 강제하여 지연 구간 식별
        with Image.open(input_path) as img:
            _ = img.size          # 메타 접근
            img.load()            # 완전 로드(지연평가 방지)
            out = img.convert("RGB")
            out.save(save_path, "PNG", optimize=True)

        dt = time.time() - t0
        logger.info(f"[종료] convert_to_png → {save_path} ({dt:.2f}s)")
        return save_path

    except Exception as e:
        logger.error(f"[ERROR] convert_to_png 실패: {e}", exc_info=True)
        raise