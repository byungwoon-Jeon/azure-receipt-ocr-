# wrapper.py 상단 import 보강
from datetime import datetime
import os
import json
import logging

logger = logging.getLogger("WRAPPER")  # 있으면 생략

def write_fail_and_insert(in_params: dict,
                          base: dict,
                          code: str,
                          message: str,
                          attach_file: str | None = None,
                          receipt_index: int | None = None):
    """
    모든 실패 지점에서 호출하는 공통 함수.
    - fail JSON(summary+items[]) 생성
    - insert_postprocessed_result로 DB 입력 시도
    """
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    fiid = base.get("FIID")
    line_index = base.get("LINE_INDEX")
    r_idx = receipt_index if receipt_index is not None else base.get("RECEIPT_INDEX")

    summary = {
        "FIID": fiid,
        "LINE_INDEX": line_index,
        "RECEIPT_INDEX": r_idx,
        "COMMON_YN": base.get("COMMON_YN"),
        "GUBUN": base.get("GUBUN"),
        "ATTACH_FILE": attach_file,
        "COUNTRY": None, "RECEIPT_TYPE": None, "MERCHANT_NAME": None, "MERCHANT_PHONE_NO": None,
        "DELIVERY_ADDR": None, "TRANSACTION_DATE": None, "TRANSACTION_TIME": None,
        "TOTAL_AMOUNT": None, "SUMTOTAL_AMOUNT": None, "TAX_AMOUNT": None, "BIZ_NO": None,
        "RESULT_CODE": code,
        "RESULT_MESSAGE": message,
        "CREATE_DATE": now_str,
        "UPDATE_DATE": now_str
    }

    os.makedirs(in_params["post_json_dir"], exist_ok=True)
    fail_name = f"fail_{fiid}_{line_index}_{r_idx if r_idx is not None else 0}_post.json"
    fail_path = os.path.join(in_params["post_json_dir"], fail_name)
    with open(fail_path, "w", encoding="utf-8") as f:
        json.dump({"summary": summary, "items": []}, f, ensure_ascii=False, indent=2)

    try:
        insert_postprocessed_result(fail_path, in_params)
    except Exception as e:
        logger.error(f"[FATAL][DB_ERR] fail JSON DB 입력 실패: {e} (path={fail_path})", exc_info=True)


def process_single_record(record: dict, in_params: dict):
    logger.info(f"[시작] process_single_record - FIID={record.get('FIID')}, LINE_INDEX={record.get('LINE_INDEX')}")
    try:
        # 1) 전처리 실행
        cropped_list = run_pre_pre_process(in_params, record)

        # 전처리 단계 자체 실패(예: 다운로드/DRM/변환 등) → 아무 결과도 없을 때 기록
        if not cropped_list:
            write_fail_and_insert(
                in_params=in_params,
                base={"FIID": record.get("FIID"),
                      "LINE_INDEX": record.get("LINE_INDEX"),
                      "GUBUN": record.get("GUBUN"),
                      "COMMON_YN": None},
                code="PRE_ERR",
                message="전처리 단계 실패 또는 결과 없음",
                attach_file=record.get("ATTACH_FILE"),
                receipt_index=None
            )
            return

        for cropped in cropped_list:
            # 2) YOLO 오류(박스 없음/여러개 등)도 무조건 기록
            if "RESULT_CODE" in cropped:
                write_fail_and_insert(
                    in_params=in_params,
                    base={"FIID": cropped.get("FIID"),
                          "LINE_INDEX": cropped.get("LINE_INDEX"),
                          "GUBUN": cropped.get("GUBUN"),
                          "COMMON_YN": cropped.get("COMMON_YN"),
                          "RECEIPT_INDEX": cropped.get("RECEIPT_INDEX")},
                    code=cropped.get("RESULT_CODE", "YOLO_ERR"),
                    message=cropped.get("RESULT_MESSAGE", "YOLO 단계 오류"),
                    attach_file=record.get("ATTACH_FILE"),
                    receipt_index=cropped.get("RECEIPT_INDEX")
                )
                continue

            # 3) OCR
            ocr_result = run_azure_ocr(in_params, cropped)
            if ocr_result.get("RESULT_CODE") == "AZURE_ERR":
                # ⬇️ 기존 로직 유지: fail JSON 만들고 DB 저장
                now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                error_summary = {
                    "FIID": cropped.get("FIID"),
                    "LINE_INDEX": cropped.get("LINE_INDEX"),
                    "RECEIPT_INDEX": cropped.get("RECEIPT_INDEX"),
                    "COMMON_YN": cropped.get("COMMON_YN"),
                    "GUBUN": cropped.get("GUBUN"),
                    "ATTACH_FILE": record.get("ATTACH_FILE"),
                    "COUNTRY": None, "RECEIPT_TYPE": None, "MERCHANT_NAME": None, "MERCHANT_PHONE_NO": None,
                    "DELIVERY_ADDR": None, "TRANSACTION_DATE": None, "TRANSACTION_TIME": None,
                    "TOTAL_AMOUNT": None, "SUMTOTAL_AMOUNT": None, "TAX_AMOUNT": None, "BIZ_NO": None,
                    "RESULT_CODE": ocr_result.get("RESULT_CODE"),
                    "RESULT_MESSAGE": ocr_result.get("RESULT_MESSAGE"),
                    "CREATE_DATE": now_str,
                    "UPDATE_DATE": now_str
                }
                error_result_path = os.path.join(
                    in_params["post_json_dir"],
                    f"fail_{error_summary['FIID']}_{error_summary['LINE_INDEX']}_{error_summary['RECEIPT_INDEX']}_post.json"
                )
                with open(error_result_path, "w", encoding="utf-8") as f:
                    json.dump({"summary": error_summary, "items": []}, f, ensure_ascii=False, indent=2)
                insert_postprocessed_result(error_result_path, in_params)
                continue

            # 4) 후처리
            try:
                json_path = os.path.join(
                    in_params["ocr_json_dir"],
                    f"{os.path.splitext(os.path.basename(cropped['file_path']))[0]}.ocr.json"
                )
                post_json_path = post_process_and_save(
                    {**in_params, "postprocess_output_dir": in_params["post_json_dir"]},
                    {**cropped, "json_path": json_path, "ATTACH_FILE": record.get("ATTACH_FILE")}
                )
            except Exception as e:
                # 만약 post_process_and_save 내부에서 예외가 전파되면 여기서도 안전하게 실패 기록
                write_fail_and_insert(
                    in_params=in_params,
                    base=cropped,
                    code="POST_ERR",
                    message=str(e),
                    attach_file=record.get("ATTACH_FILE"),
                    receipt_index=cropped.get("RECEIPT_INDEX")
                )
                continue

            # 5) DB 저장 (후처리 성공/또는 후처리 내부에서 만든 fail JSON 경로)
            try:
                insert_postprocessed_result(post_json_path, in_params)
            except Exception as e:
                # DB 오류도 기록(이중 실패지만, 로그로 원인 남김)
                logger.error(f"[ERROR] DB 저장 실패: {e} (path={post_json_path})", exc_info=True)

    except Exception as e:
        # 래퍼 레벨의 예기치 못한 오류도 기록
        write_fail_and_insert(
            in_params=in_params,
            base={"FIID": record.get("FIID"),
                  "LINE_INDEX": record.get("LINE_INDEX"),
                  "GUBUN": record.get("GUBUN"),
                  "COMMON_YN": None},
            code="WRAP_ERR",
            message=str(e),
            attach_file=record.get("ATTACH_FILE"),
            receipt_index=None
        )
    logger.info(f"[종료] process_single_record - FIID={record.get('FIID')}, LINE_INDEX={record.get('LINE_INDEX')}")